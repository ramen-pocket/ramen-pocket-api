AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: A serverless API service for the project Ramen Pocket

Parameters:
  ProjectName:
    Type: String
    Default: ramen-pocket
  Stage:
    Type: String
    Default: dev
  TopDomainName:
    Type: String
  ApiDomainName:
    Type: String
  LambdaRoleARN:
    Type: String
  DBUsername:
    Type: String
  DBPassword:
    Type: String
    NoEcho: true
  GoogleClientId:
    Type: String
  CertificateARN:
    Type: String
    Description: The ARN of a certificate for the custom domain.

Globals:
  Api:
    Name: ramen-pocket-api
    EndpointConfiguration: REGIONAL
    Domain:
      CertificateArn: !Ref CertificateARN
      DomainName: !Ref ApiDomainName
    GatewayResponses:
      DEFAULT_4XX:
        ResponseTemplates:
          application/json: '{"reason": $context.error.messageString}'
    Auth:
      Authorizers:
        LambdaTokenAuthorizer:
          FunctionArn: !GetAtt Authenticator.Arn
    Cors:
      AllowOrigin: !Join ["", ["'", !Ref TopDomainName, "'"]]
      AllowCredentials: True
  Function:
    Runtime: nodejs10.x
    Timeout: 60
    Handler: index.default
    MemorySize: 128
    Environment:
      Variables:
        PROJECT_NAME: !Ref ProjectName
        STAGE: !Ref Stage
        DB_HOST: !GetAtt Database.Endpoint.Address
        DB_USERNAME: !Ref DBUsername
        DB_PASSWORD: !Ref DBPassword
        DB_DATABASE: ramen_pocket
        GOOGLE_CLIENT_ID: !Ref GoogleClientId
    Tags:
      Owner: Ramen Pocket Dev Team

Outputs:
  DatabaseEndpoint:
    Description: The endpoint of the RDS instance
    Value: !GetAtt Database.Endpoint.Address

Resources:
  DatabaseVPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: A VPC security group for the database.
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 3306
          ToPort: 3306
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t2.micro
      AllocatedStorage: "20"
      AvailabilityZone: us-east-1a
      BackupRetentionPeriod: 0
      DBName: ramen_pocket
      DeleteAutomatedBackups: true
      DeletionProtection: false
      EnablePerformanceInsights: false
      Engine: mariadb
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MonitoringInterval: 0
      MultiAZ: false
      Port: 3306
      StorageType: standard
      VPCSecurityGroups:
        - !GetAtt DatabaseVPCSecurityGroup.GroupId
      Tags:
        - Key: Owner
          Value: Ramen Pocket Dev Team
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes: [nodejs10.x]
      ContentUri: ./dist/layers/common.zip
  OAuthLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes: [nodejs10.x]
      ContentUri: ./dist/layers/oauth.zip
  Authenticator:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/authenticator
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer, !Ref OAuthLayer]
  ReadSession:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/read-session
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer]
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /session
            Method: GET
  ReadHealth:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/read-health
      Role: !Ref LambdaRoleARN
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /health
            Method: GET
            Auth:
              Authorizer: LambdaTokenAuthorizer
  ReadUserProfile:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/read-user-profile
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer]
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /user/profile
            Method: GET
            Auth:
              Authorizer: LambdaTokenAuthorizer
  ReadUserCollections:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/read-user-collections
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer]
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /user/collections
            Method: GET
            Auth:
              Authorizer: LambdaTokenAuthorizer
  CreateUserCollections:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/create-user-collections
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer]
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /user/collections
            Method: POST
            Auth:
              Authorizer: LambdaTokenAuthorizer
  DeleteUserCollection:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/delete-user-collection
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer]
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /user/collections/{storeId}
            Method: DELETE
            Auth:
              Authorizer: LambdaTokenAuthorizer
  ReadUserComments:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/read-user-comments
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer]
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /user/comments
            Method: GET
            Auth:
              Authorizer: LambdaTokenAuthorizer
  ReadSpecifiedUserProfile:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/read-specified-user-profile
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer]
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /users/{id}/profile
            Method: GET
            Auth:
              Authorizer: LambdaTokenAuthorizer
  ReadSpecifiedUserCollections:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/read-specified-user-collections
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer]
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /users/{id}/collections
            Method: GET
            Auth:
              Authorizer: LambdaTokenAuthorizer
  ReadSpecifiedUserComments:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/read-specified-user-comments
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer]
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /users/{id}/comments
            Method: GET
            Auth:
              Authorizer: LambdaTokenAuthorizer
  ReadStores:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/read-stores
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer]
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /stores
            Method: GET
            Auth:
              Authorizer: LambdaTokenAuthorizer
  ReadStoreComments:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/read-stores-comments
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer]
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /stores/{storeId}/comments
            Method: GET
            Auth:
              Authorizer: LambdaTokenAuthorizer
  CreateStoreComment:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/create-store-comment
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer]
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /stores/{storeId}/comments
            Method: POST
            Auth:
              Authorizer: LambdaTokenAuthorizer
  UpdateStoreComment:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/update-store-comment
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer]
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /stores/{storeId}/comments/{commentId}
            Method: PUT
            Auth:
              Authorizer: LambdaTokenAuthorizer
  DeleteStoreComment:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/lambdas/delete-store-comment
      Role: !Ref LambdaRoleARN
      Layers: [!Ref CommonLayer]
      Events:
        APIGateway:
          Type: Api
          Properties:
            Path: /stores/{storeId}/comments/{commentId}
            Method: DELETE
            Auth:
              Authorizer: LambdaTokenAuthorizer
